- origin = :ciner_question if current_user.admin?
- origin ||= :user_question
- questionable_type = f.object.questionable_type
- questionable_type = questionable_type.to_s
- questionable_movies_class = (questionable_type == 'Movie') ? '' : 'hidden'
- questionable_series_class = (questionable_type == 'Serie') ? '' : 'hidden'
- questionable_professionals_class = (questionable_type == 'Professional') ? '' : 'hidden'
- title = ''

- if !params.blank? && !params[:questionable_type].blank? && params[:questionable_type] == 'Broadcast'
  - broadcast = Broadcast.where(id: params[:questionable_id]).first
  - title = "Notícia: #{broadcast.title}"


- broadcast ||= nil

%h3
  = t('.general')

  = f.object.errors.first.to_s

- if !broadcast.blank?
  .row
    .col-xs-6
      = f.input :questionable_type, collection: [["Notícia", :broadcast]], selected: questionable_type, include_blank: 'Notícia', input_html: { selected: params[:questionable_type], disabled: true }
    .col-xs-6
      .div
        = f.label :broadcast, "Notícia"
        = f.input :questionable_id, label: false, collection: [broadcast], include_blank: "#{broadcast.title}", input_html: { selected: params[:questionable_id], disabled: true }

  = f.hidden_field :questionable_type, value: params[:questionable_type]
  = f.hidden_field :questionable_id, value: params[:questionable_id]
- else
  .row{ data: { questionable: '', tipsy: '' }, title: 'Para debater sobre uma notícia, selecione "Debater" na área de notícias' }
    .col-xs-6{ data: { questionable_select: '' } }
      = f.input :questionable_type, collection: Question.localized_questionable_types, selected: questionable_type, include_blank: 'Escolha uma área'
    .col-xs-6{ data: { tipsy: '' } }
      .div{ class: "#{questionable_movies_class}", data: { questionable_type: 'Movie' } }
        = f.input :questionable_id, collection: movies, input_html: { data: { remote_select: '', ajax_url: api_v1_movies_path } }, label_method: :title_str, value_method: :id
      .div{ class: "#{questionable_series_class}", data: { questionable_type: 'Serie' } }
        = f.input :questionable_id, collection: series, input_html: { data: { remote_select: '', ajax_url: api_v1_series_index_path } }, label_method: :title_str, value_method: :id
      .div{ class: "#{questionable_professionals_class}", data: { questionable_type: 'Professional' } }
        = f.input :questionable_id, collection: professionals, input_html: { data: { remote_select: '', ajax_url: api_v1_professionals_path } }, label_method: :title_str, value_method: :id

.row
  .col-xs-12
    = f.input :title, input_html: { value: title, disabled: !title.blank? }
    - unless title.blank?
      = f.hidden_field :title, value: title

.row
  .col-xs-12
    = f.input :content, as: :ckeditor, input_html: { rows: 5 }

.row
  .col-xs-4
    = checkbox_item(f, :spoiler)

= f.hidden_field :user_id, value: current_user.id
= f.hidden_field :origin, value: origin

- if f.object.persisted? && current_user.admin?
  .row
    .col-xs-6
      = f.input :status, collection: Question.localized_detailed_statuses, include_blank: t('.select_status'), input_html: { selected: "approved" }
- else
  = f.hidden_field :status, value: :approved

= render 'shared/form_actions', f: f
